@using System.Web
@using System.Text.RegularExpressions;
@using System.Linq;

@page "/harmony"
@rendermode InteractiveServer

<div class="row">
	<div class="col border p-3">
		<h3>Harmony of the 4 Gospels</h3> <hr />@* 

	</div>
	<div class="col-6 border p-3"> *@
		<div class="row">
			<div class="col-4 my-auto overflow-auto">
				<div class="input-group">
					<span class="input-group-text">Selected Story is : @selectedStory</span>
				</div>
			</div>
			<div class="col-2 ">
				<button class="btn btn-dark mx-auto d-block" @onclick="LoadPreviousStory">Previous Story</button>
			</div>
			<div class="col-4">
				<select value="@selectedStory" @onchange="OnSelectionChangedEvent" class="form-select mx-auto d-block">
					@foreach (HarmonyBibleVerse hmVerse in HarmonyBibleVerses)
					{
						if (hmVerse.IsHeading())
						{
							<option class="bg-success-subtle disabled" value="@hmVerse.Story">@hmVerse.Story</option>
						}
						else
						{
							<option value="@hmVerse.Story">@hmVerse.Story</option>
						}
					}
				</select>
			</div>
			<div class="col-2">
				<button class="btn btn-dark mx-auto d-block" @onclick="LoadNextStory">Next Story</button>
			</div>
		</div>
	</div>
</div>
<div class="row">
	<div class="col-md-3 border p-3">
		<span class="badge text-bg-primary" @* sticky-top" style="top:4vw" *@>Gospel of Matthew</span>
		<button class="btn btn-dark badge" @onclick="()=>FetchFullChapter(BookName.Matthew)">Expand</button>
		<hr />
		<MarkupText InputValue="@passageMatthew"></MarkupText>
	</div>
	<div class="col-md-3 border p-3">
		<span class="badge text-bg-primary" @* sticky-top" style="top:4vw" *@> Gospel of Mark</span>
		<button class="btn btn-dark badge" @onclick="()=>FetchFullChapter(BookName.Mark)">Expand</button>
		<hr />
		<MarkupText InputValue="@passageMark"></MarkupText>
	</div>
	<div class="col-md-3 border p-3">
		<span class="badge text-bg-primary" @* sticky-top" style="top:4vw" *@>Gospel of Luke</span>
		<button class="btn btn-dark badge" @onclick="()=>FetchFullChapter(BookName.Luke)">Expand</button>
		<hr />
		<MarkupText InputValue="@passageLuke"></MarkupText>
	</div>
	<div class="col-md-3 border p-3">
		<span class="badge text-bg-primary" @* sticky-top" style="top:4vw" *@>Gospel of John</span>
		<button class="btn btn-dark badge" @onclick="()=>FetchFullChapter(BookName.John)">Expand</button>
		@if (isExpanded)
		{
			<button class="btn btn-danger badge mx-1" @onclick="()=>LoadStory()">Unexpand All</button>
		}
		else
		{
			<button class="btn btn-success badge mx-1" @onclick="()=>FetchFullChapter(BookName.All)">Expand All</button>
		}
		<hr />
		<MarkupText InputValue="@passageJohn"></MarkupText>
	</div>
</div>


@code {
	List<String> stories = new();
	List<HarmonyBibleVerse> HarmonyBibleVerses = new();
	public string selectedStory { get; set; } = String.Empty;
	HarmonyProcessor harmonyProcessor;
	HarmonyBibleVerse harmonyBibleVerse;
	HarmonyBibleVerse selectedHarmonyBibleVerse = new();

	string passageMatthew;
	string passageMark;
	string passageLuke;
	string passageJohn;

	bool isExpanded = false;

	protected override void OnInitialized()
	{
		harmonyBibleVerse = new();
		harmonyProcessor = new();
		ResetResponses();

		HarmonyBibleVerses = harmonyProcessor.ReadHarmonyFile();
		HarmonyBibleVerses.RemoveAt(0);

	}
	private async void OnSelectionChangedEvent(ChangeEventArgs e)
	{
		await GetVerse(e.Value.ToString());
	}

	private async Task GetVerse(string value)
	{
		selectedStory = value;
		selectedHarmonyBibleVerse = HarmonyBibleVerses.Where(x => x.Story == selectedStory).FirstOrDefault();

		harmonyBibleVerse = harmonyProcessor.GetVersesByStory(selectedStory);
		ResetResponses();

		//TODO - Send as one request
		// List<string> bookChapterVerses = new();

		// // bookChapterVerses.Add(harmonyBibleVerse.Ma)
		await LoadStory();
	}

	private async Task LoadStory()
	{
		isExpanded = false;
		APIHelper apiHelper = new();

		var responseMatthew = await apiHelper.GetVerses(HarmonyBibleVerse.MatthewName, harmonyBibleVerse.MatthewVerse.Trim());
		var responseMark = await apiHelper.GetVerses(HarmonyBibleVerse.MarkName, harmonyBibleVerse.MarkVerse.Trim());
		var responseLuke = await apiHelper.GetVerses(HarmonyBibleVerse.LukeName, harmonyBibleVerse.LukeVerse.Trim());
		var responseJohn = await apiHelper.GetVerses(HarmonyBibleVerse.JohnName, harmonyBibleVerse.JohnVerse.Trim());

		UpdatePassage(responseMatthew, responseMark, responseLuke, responseJohn);
	}

	private void ResetResponses()
	{
		passageMatthew = string.Empty;
		passageMark = string.Empty;
		passageLuke = string.Empty;
		passageJohn = string.Empty;
		StateHasChanged();
	}

	private void UpdatePassage(ApiResponse responseMatthew = null, ApiResponse responseMark = null, ApiResponse responseLuke = null, ApiResponse responseJohn = null)
	{
		if (responseMatthew != null)
		{
			passageMatthew = responseMatthew.DisplayPassage();
		}

		if (responseMark != null)
		{
			passageMark = responseMark.DisplayPassage();
		}

		if (responseLuke != null)
		{
			passageLuke = responseLuke.DisplayPassage();
		}

		if (responseJohn != null)
		{
			passageJohn = responseJohn.DisplayPassage();
		}

		StateHasChanged();
	}

	private async Task LoadPreviousStory(EventArgs e)
	{
		var indexOfCurrent = HarmonyBibleVerses.IndexOf(selectedHarmonyBibleVerse);

		if (HarmonyBibleVerses[--indexOfCurrent].IsHeading())
		{
			//Skip any headings
			--indexOfCurrent;
		}

		await GetVerse(HarmonyBibleVerses[indexOfCurrent].Story);
	}

	private async Task LoadNextStory()
	{
		var indexOfCurrent = HarmonyBibleVerses.IndexOf(selectedHarmonyBibleVerse);

		if (HarmonyBibleVerses[++indexOfCurrent].IsHeading())
		{
			//Skip any headings
			++indexOfCurrent;
		}

		await GetVerse(HarmonyBibleVerses[indexOfCurrent].Story);
	}

	private async void FetchFullChapter(BookName book = BookName.All)
	{
		APIHelper aPIHelper = new();

		switch (book)
		{

			case BookName.Matthew:
				UpdatePassage(responseMatthew: await aPIHelper.GetBook(HarmonyBibleVerse.MatthewName, string.Join(';', harmonyBibleVerse.MatthewChapters)));
				break;
			case BookName.Mark:
				UpdatePassage(responseMark: await aPIHelper.GetBook(HarmonyBibleVerse.MarkName, string.Join(';', harmonyBibleVerse.MarkChapters)));
				break;
			case BookName.Luke:
				UpdatePassage(responseLuke: await aPIHelper.GetBook(HarmonyBibleVerse.LukeName, string.Join(';', harmonyBibleVerse.LukeChapters)));
				break;
			case BookName.John:
				UpdatePassage(responseJohn: await aPIHelper.GetBook(HarmonyBibleVerse.JohnName, string.Join(';', harmonyBibleVerse.JohnChapters)));
				break;

			default:
				isExpanded = true;
				var responseMatthew = await aPIHelper.GetBook(HarmonyBibleVerse.MatthewName, string.Join(';', harmonyBibleVerse.MatthewChapters));
				var responseMark = await aPIHelper.GetBook(HarmonyBibleVerse.MarkName, string.Join(';', harmonyBibleVerse.MarkChapters));
				var responseLuke = await aPIHelper.GetBook(HarmonyBibleVerse.LukeName, string.Join(';', harmonyBibleVerse.LukeChapters));
				var responseJohn = await aPIHelper.GetBook(HarmonyBibleVerse.JohnName, string.Join(';', harmonyBibleVerse.JohnChapters));

				UpdatePassage(responseMatthew, responseMark, responseLuke, responseJohn);
				break;
		}
	}
}
